@page "/plans/details/{id}"

@inject PlansService plansService
@inject ToDoItemsService itemsService
@inject IFileReaderService fileReaderService
@inject NavigationManager navigationManager

@attribute [Authorize]

<h3>Plan @model.Title</h3>

<div class="row">
    <div class="col-6">
        <EditForm Model="model" OnValidSubmit="async () => await editPlanAsync()">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <RadzenTextBox Placeholder="Title" @bind-Value="model.Title" Style="margin: 10px;" />
                <RadzenTextArea Placeholder="Description" @bind-Value="model.Description" Style="margin: 10px;" />
                <input type="file" Style="margin: 10px;" @ref="inputReference" @onchange="async () => await choseFileAsync()" />
                <img style="width: 100%; margin: 10px;" src="@imageContent" />
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Success" Disabled="isBusy" Style="margin: 5px;" class="btn btn-block" Text="Edit" />
            </RadzenCard>
        </EditForm>
    </div>
    <div class="col-6">
        <RadzenCard>
            <h2>Plan's Items</h2>
            <AlertMessage Message="@itemMessage" MessageType="Models.AlertMessageType.Error" />
            <EditForm Model="itemModel" OnValidSubmit="async () => await submitItemFormAsync()">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <table>
                    <tr>
                        <td>
                            <RadzenButton Text="*" Disabled="isBusy" Click="clearSelection" ButtonStyle="Radzen.ButtonStyle.Info" ButtonType="Radzen.ButtonType.Button" />
                        </td>
                        <td>
                            <RadzenTextBox Placeholder="Item Description ...." @bind-Value="itemModel.Description" />
                        </td>
                        <td>
                            <RadzenButton Text="Submit" Disabled="isBusy" ButtonStyle="Radzen.ButtonStyle.Primary" ButtonType="Radzen.ButtonType.Submit" />
                        </td>
                    </tr>
                    @foreach (var item in items)
                    {
                        string descriptionStyle = item.IsDone ? "text-decoration-line: line-through;" : "text-decoration-line: none;";
                        string rowStyle = selectedItem == item ? "cursor: pointer; background: lightblue;" : "cursor: pointer; background: white;";
                        <tr style="@rowStyle" @onclick="() => selectItem(item)">
                            <td>
                                <RadzenCheckBox @bind-Value="item.IsDone" @onclick="async () => await changeItemStatusAsync(item.Id)" />
                            </td>
                            <td>
                                <span style="@descriptionStyle">@item.Description</span>
                            </td>
                            <td>
                                <RadzenButton Text="X" Click="async () => await removeItem(item)" Disabled="isBusy" ButtonStyle="Radzen.ButtonStyle.Danger" ButtonType="Radzen.ButtonType.Button" />
                            </td>
                        </tr>
                    }
                </table>
            </EditForm>
        </RadzenCard>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public string Id { get; set; }

    PlanRequest model = new PlanRequest();
    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;

    bool isBusy = false;

    ElementReference inputReference;

    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    async Task choseFileAsync()
    {
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };

        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        var fileInfo = await file.ReadFileInfoAsync();
        string extension = System.IO.Path.GetExtension(fileInfo.Name);

        if (!allowedExtensions.Contains(extension))
        {
            message = "The chosen file is invalid. Must be .jpg, .png or .bmp.";
            messageType = Models.AlertMessageType.Error;
            return;
        }

        message = null;

        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
            fileName = fileInfo.Name;
            imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }

    async Task editPlanAsync()
    {
        isBusy = true;

        model.CoverFile = fileStream;
        model.FileName = fileName;
        var result = await plansService.EditPlanAsync(model);

        if (result.IsSuccess)
        {
            message = "Plan edited successfully";
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    async Task getPlanById()
    {
        isBusy = true;

        var result = await plansService.GetPlanByIdAsync(Id);

        if (result.IsSuccess)
        {
            model.Title = result.Record.Title;
            model.Description = result.Record.Description;
            imageContent = result.Record.CoverPath;
            model.Id = Id;
            items = result.Record.ToDoItems.ToList();
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    protected async override Task OnInitializedAsync()
    {
        var userState = authenticationState.Result;
        string accessToken = userState.User.FindFirst("AccessToken").Value;
        itemsService.AccessToken = accessToken;
        plansService.AccessToken = accessToken;

        await getPlanById();
    }

    #region Items

    List<ToDoItem> items = new List<ToDoItem>();
    ToDoItem selectedItem = null;
    ToDoItemRequest itemModel = new ToDoItemRequest();
    string itemMessage = string.Empty;

    async Task insertItemAsync()
    {
        isBusy = true;

        itemModel.PlanId = Id;
        var result = await itemsService.CreateItemAsync(itemModel);
        if (result.IsSuccess)
        {
            items.Add(result.Record);
        }
        else
        {
            itemMessage = result.Message;
        }

        isBusy = false;
    }

    async Task editItemAsync()
    {
        isBusy = true;

        itemModel.PlanId = Id;
        var result = await itemsService.EditItemAsync(itemModel);
        if (result.IsSuccess)
        {
            var editedItem = items.SingleOrDefault(i => i.Id == result.Record.Id);
            editedItem.Description = result.Record.Description;
        }
        else
        {
            itemMessage = result.Message;
        }

        isBusy = false;
    }

    async Task submitItemFormAsync()
    {
        if (selectedItem == null)
        {
            await insertItemAsync();
        }
        else
        {
            await editItemAsync();
        }
    }

    async Task changeItemStatusAsync(string itemId)
    {
        isBusy = true;

        var result = await itemsService.ChangeItemStateAsync(itemId);

        if (!result.IsSuccess)
        {
            itemMessage = result.Message;
        }

        isBusy = false;
    }

    void selectItem(ToDoItem item)
    {
        selectedItem = item;
        itemModel.Id = item.Id;
        itemModel.Description = item.Description;

        if (item.IsDone)
        {
            itemMessage = "Checked item cannot be edited.";
        }
        else
        {
            itemMessage = null;
        }
    }

    void clearSelection()
    {
        selectedItem = null;
        itemModel.Id = null;
        itemModel.Description = null;
    }

    async Task removeItem(ToDoItem item)
    {
        isBusy = true;

        var result = await itemsService.DeleteItemAsync(item.Id);
        if (result.IsSuccess)
        {
            items.Remove(item);
        }
        else
        {
            itemMessage = result.Message;
        }

        isBusy = false;
    }

    #endregion
}
