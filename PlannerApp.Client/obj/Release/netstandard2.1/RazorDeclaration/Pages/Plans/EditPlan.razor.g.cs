// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PlannerApp.Client.Pages.Plans
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using PlannerApp.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using PlannerApp.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using PlannerApp.Shared.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using PlannerApp.Shared.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\Code\PlannerApp\PlannerApp.Client\_Imports.razor"
using Tewr.Blazor.FileReader;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Code\PlannerApp\PlannerApp.Client\Pages\Plans\EditPlan.razor"
           [Authorize]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/plans/details/{id}")]
    public partial class EditPlan : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 71 "D:\Code\PlannerApp\PlannerApp.Client\Pages\Plans\EditPlan.razor"
       
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public string Id { get; set; }

    PlanRequest model = new PlanRequest();
    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;

    bool isBusy = false;

    ElementReference inputReference;

    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    async Task choseFileAsync()
    {
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };

        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        var fileInfo = await file.ReadFileInfoAsync();
        string extension = System.IO.Path.GetExtension(fileInfo.Name);

        if (!allowedExtensions.Contains(extension))
        {
            message = "The chosen file is invalid. Must be .jpg, .png or .bmp.";
            messageType = Models.AlertMessageType.Error;
            return;
        }

        message = null;

        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new System.IO.MemoryStream(memoryStream.ToArray());
            fileName = fileInfo.Name;
            imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }

    async Task editPlanAsync()
    {
        isBusy = true;

        model.CoverFile = fileStream;
        model.FileName = fileName;
        var result = await plansService.EditPlanAsync(model);

        if (result.IsSuccess)
        {
            message = "Plan edited successfully";
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    async Task getPlanById()
    {
        isBusy = true;

        var result = await plansService.GetPlanByIdAsync(Id);

        if (result.IsSuccess)
        {
            model.Title = result.Record.Title;
            model.Description = result.Record.Description;
            imageContent = result.Record.CoverPath;
            model.Id = Id;
            items = result.Record.ToDoItems.ToList();
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    protected async override Task OnInitializedAsync()
    {
        var userState = authenticationState.Result;
        string accessToken = userState.User.FindFirst("AccessToken").Value;
        itemsService.AccessToken = accessToken;
        plansService.AccessToken = accessToken;

        await getPlanById();
    }

    #region Items

    List<ToDoItem> items = new List<ToDoItem>();
    ToDoItem selectedItem = null;
    ToDoItemRequest itemModel = new ToDoItemRequest();
    string itemMessage = string.Empty;

    async Task insertItemAsync()
    {
        isBusy = true;

        itemModel.PlanId = Id;
        var result = await itemsService.CreateItemAsync(itemModel);
        if (result.IsSuccess)
        {
            items.Add(result.Record);
        }
        else
        {
            itemMessage = result.Message;
        }

        isBusy = false;
    }

    async Task editItemAsync()
    {
        isBusy = true;

        itemModel.PlanId = Id;
        var result = await itemsService.EditItemAsync(itemModel);
        if (result.IsSuccess)
        {
            var editedItem = items.SingleOrDefault(i => i.Id == result.Record.Id);
            editedItem.Description = result.Record.Description;
        }
        else
        {
            itemMessage = result.Message;
        }

        isBusy = false;
    }

    async Task submitItemFormAsync()
    {
        if (selectedItem == null)
        {
            await insertItemAsync();
        }
        else
        {
            await editItemAsync();
        }
    }

    async Task changeItemStatusAsync(string itemId)
    {
        isBusy = true;

        var result = await itemsService.ChangeItemStateAsync(itemId);

        if (!result.IsSuccess)
        {
            itemMessage = result.Message;
        }

        isBusy = false;
    }

    void selectItem(ToDoItem item)
    {
        selectedItem = item;
        itemModel.Id = item.Id;
        itemModel.Description = item.Description;

        if (item.IsDone)
        {
            itemMessage = "Checked item cannot be edited.";
        }
        else
        {
            itemMessage = null;
        }
    }

    void clearSelection()
    {
        selectedItem = null;
        itemModel.Id = null;
        itemModel.Description = null;
    }

    async Task removeItem(ToDoItem item)
    {
        isBusy = true;

        var result = await itemsService.DeleteItemAsync(item.Id);
        if (result.IsSuccess)
        {
            items.Remove(item);
        }
        else
        {
            itemMessage = result.Message;
        }

        isBusy = false;
    }

    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IFileReaderService fileReaderService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ToDoItemsService itemsService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PlansService plansService { get; set; }
    }
}
#pragma warning restore 1591
